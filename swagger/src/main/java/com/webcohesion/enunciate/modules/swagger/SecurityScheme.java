/*
 * Copyright Â© 2017-2018 Jyske Bank
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.webcohesion.enunciate.modules.swagger;

import java.util.Optional;

public class SecurityScheme {

	private final String schemeId;
	/**
	 * The name of the header, query or cookie parameter to be used.
	 */
	private final String name;
	/**
	 * A description for security scheme. CommonMark syntax MAY be used for rich text representation.
	 */
	private final Optional<String> description;
	/**
	 * The type of the security scheme. Valid values are "apiKey", "http", "mutualTLS", "oauth2", "openIdConnect".
	 */
	private final String type;
	/**
	 * The location of the API key. Valid values are "query", "header" or "cookie".
	 */
	private final String in;
	/**
	 * The name of the HTTP Authorization scheme to be used in the Authorization header as defined in RFC7235. The
	 * values used SHOULD be registered in the IANA Authentication Scheme registry.
	 */
	private final String scheme;
	/**
	 * A hint to the client to identify how the bearer token is formatted. Bearer tokens are usually generated by an
	 * authorization server, so this information is primarily for documentation purposes.
	 */
	private final String bearerFormat;
	/**
	 * OpenId Connect URL to discover OAuth2 configuration values. This MUST be in the form of a URL. The OpenID Connect
	 * standard requires the use of TLS.
	 */
	private final String openIdConnectUrl;
	/**
	 * An object containing configuration information for the flow types supported.
	 */
	private final OAuthFlows flows;

	public SecurityScheme(String schemeId, String name,
			Optional<String> description, String type, String in, String scheme, String bearerFormat,
			String openIdConnectUrl, OAuthFlows flows) {
		this.schemeId = schemeId;
		this.name = name;
		this.description = description;
		this.type = type;
		this.in = in;
		this.scheme = scheme;
		this.bearerFormat = bearerFormat;
		this.openIdConnectUrl = openIdConnectUrl;
		this.flows = flows;
	}

	public String getSchemeId() {
		return schemeId;
	}

	public String getName() {
		return name;
	}

	public Optional<String> getDescription() {
		return description;
	}

	public String getType() {
		return type;
	}

	public String getIn() {
		return in;
	}

	public String getScheme() {
		return scheme;
	}

	public String getBearerFormat() {
		return bearerFormat;
	}

	public String getOpenIdConnectUrl() {
		return openIdConnectUrl;
	}

	public boolean getHasFlows() {
		return flows != null;
	}

	public OAuthFlows getFlows() {
		return flows;
	}

}
